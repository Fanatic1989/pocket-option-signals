name: session-summary

on:
  schedule:
    - cron: "5 21 * * 1-5"   # 21:05 UTC Monâ€“Fri (end of FX window)
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  summarize:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install pandas requests yfinance pyyaml
      - name: Build & send daily summary
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<'PY'
import os, csv
from pathlib import Path
from datetime import datetime, timezone
import pandas as pd
DATA = Path("data"); DATA.mkdir(exist_ok=True)
SIG  = DATA/"signals.csv"
if not SIG.exists():
    raise SystemExit(0)
df = pd.read_csv(SIG)
if df.empty or "status" not in df.columns: raise SystemExit(0)
df["ts_utc"] = pd.to_datetime(df["ts_utc"], utc=True, errors="coerce")
df = df.dropna(subset=["ts_utc"])
today = pd.Timestamp.utcnow().date()
day_df = df[(df["status"]=="closed") & (df["ts_utc"].dt.date==today)]
if day_df.empty: raise SystemExit(0)
wins  = int((day_df["outcome"]=="WIN").sum())
loss  = int((day_df["outcome"]=="LOSS").sum())
draw  = int((day_df["outcome"]=="DRAW").sum()) if "outcome" in day_df else 0
total = wins+loss+draw
acc   = round(100* wins / max(1,(wins+loss)),1)
text = (f"ðŸ“Š *Session Summary* â€” {today} UTC\n"
        f"Total: {total}\n"
        f"Wins: {wins} | Losses: {loss} | Draws: {draw}\n"
        f"Accuracy (excl. draws): {acc}%")
import requests
url=f"https://api.telegram.org/bot{os.environ['TELEGRAM_BOT_TOKEN']}/sendMessage"
r = requests.post(url, data={"chat_id": os.environ['TELEGRAM_CHAT_ID'], "text": text, "parse_mode":"Markdown"})
r.raise_for_status()
PY
