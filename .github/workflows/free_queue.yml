name: free-queue

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  post_free:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f constraints.txt ]; then
            python -m pip install -r requirements.txt -c constraints.txt
          else
            python -m pip install -r requirements.txt
          fi
          python -m pip install pandas requests --upgrade

      - name: Publish due free messages
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_FREE_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_FREE }}
        run: |
          python - <<'PY'
          import os, pandas as pd
          from pathlib import Path
          from datetime import datetime, timezone
          import requests, subprocess

          DATA = Path("data"); DATA.mkdir(exist_ok=True)
          Q = DATA / "free_queue.csv"
          if not Q.exists():
              raise SystemExit(0)

          df = pd.read_csv(Q)
          if df.empty or "available_at_utc" not in df.columns or "text" not in df.columns:
              raise SystemExit(0)

          df["available_at_utc"] = pd.to_datetime(df["available_at_utc"], utc=True, errors="coerce")
          now = datetime.now(timezone.utc)
          due  = df[df["available_at_utc"] <= now]
          keep = df[df["available_at_utc"] > now]

          if due.empty:
              raise SystemExit(0)

          bot = os.environ["TELEGRAM_BOT_TOKEN"]
          chat = os.environ["TELEGRAM_FREE_CHAT_ID"]
          url = f"https://api.telegram.org/bot{bot}/sendMessage"

          for _, row in due.iterrows():
              text = str(row["text"])
              r = requests.post(url, data={"chat_id": chat, "text": text, "parse_mode": "Markdown"}, timeout=30)
              r.raise_for_status()

          if keep.empty:
              Q.unlink(missing_ok=True)
          else:
              keep.to_csv(Q, index=False)

          # persist queue state (optional; safe if no changes)
          try:
              subprocess.run(["git","config","user.email","bot@users.noreply.github.com"], check=False)
              subprocess.run(["git","config","user.name","free-queue-bot"], check=False)
              subprocess.run(["git","add","data/free_queue.csv"], check=False)
              subprocess.run(["git","commit","-m",f"free-queue: posted {len(due)} item(s)"], check=False)
              subprocess.run(["git","push"], check=False)
          except Exception:
              pass
          PY
