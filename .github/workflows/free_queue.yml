name: tier-queues

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  post_queues:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f constraints.txt ]; then
            python -m pip install -r requirements.txt -c constraints.txt
          else
            python -m pip install -r requirements.txt
          fi
          python -m pip install pandas requests --upgrade

      - name: Publish due Basic/Free messages
        env:
          TELEGRAM_BOT_TOKEN:     ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_FREE_CHAT_ID:  ${{ secrets.TELEGRAM_CHAT_FREE }}
          TELEGRAM_BASIC_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_BASIC }}
        run: |
          python - <<'PY'
          import os, pandas as pd, requests, subprocess
          from pathlib import Path
          from datetime import datetime, timezone

          DATA = Path("data"); DATA.mkdir(exist_ok=True)

          def post_queue(csv_file, chat_id):
              f = DATA / csv_file
              if not chat_id or not f.exists(): 
                  return 0
              df = pd.read_csv(f)
              if df.empty or "available_at_utc" not in df.columns or "text" not in df.columns:
                  return 0
              df["available_at_utc"] = pd.to_datetime(df["available_at_utc"], utc=True, errors="coerce")
              now = datetime.now(timezone.utc)
              due  = df[df["available_at_utc"] <= now]
              keep = df[df["available_at_utc"] > now]
              if due.empty: 
                  return 0
              url = f"https://api.telegram.org/bot{os.environ['TELEGRAM_BOT_TOKEN']}/sendMessage"
              for _, row in due.iterrows():
                  text = str(row["text"])
                  r = requests.post(url, data={"chat_id": chat_id, "text": text, "parse_mode":"Markdown"}, timeout=30)
                  r.raise_for_status()
              if keep.empty:
                  f.unlink(missing_ok=True)
              else:
                  keep.to_csv(f, index=False)
              return len(due)

          posted_basic = post_queue("basic_queue.csv", os.environ.get("TELEGRAM_BASIC_CHAT_ID"))
          posted_free  = post_queue("free_queue.csv",  os.environ.get("TELEGRAM_FREE_CHAT_ID"))

          if posted_basic or posted_free:
              subprocess.run(["git","config","user.email","bot@users.noreply.github.com"], check=False)
              subprocess.run(["git","config","user.name","tier-queue-bot"], check=False)
              subprocess.run(["git","add","data/basic_queue.csv","data/free_queue.csv"], check=False)
              subprocess.run(["git","commit","-m",f"tier-queues: posted basic={posted_basic} free={posted_free}"], check=False)
              subprocess.run(["git","push"], check=False)
          PY
